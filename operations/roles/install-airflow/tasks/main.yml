---

- name: Airflow Installation 
  debug: msg="Starting Airflow installation, Version:{{ airflow_latest_version }}"

- name: Create Group for {{ func_group }} 
  group: name={{ func_group }} state=present system=false

- name: Create User for {{ func_group }} 
  user: name={{ func_user }} shell=/bin/bash  state=present 
        group={{ func_group }} home={{ func_user_home }} create_home=true 

- name: Create Airflow directory 
  file: path={{ item }} state=directory mode="0755"
        owner={{ func_user }} group={{ func_group }} mode="0755"
  loop: 
    - "{{ airflow_home }}"
    - "{{ airflow_home }}/scheduler"

- name: Install dependency packages 
  package: name={{ dependency_packages }} state=present 

- name: Configure AIRFLOW HOME 
  lineinfile: path=/home/{{ func_user }}/.bashrc insertafter=EOF
              line="export AIRFLOW_HOME={{ airflow_home }}" 

- name: Create a Python 3.12 virtual environment for Airflow
  become_user: "{{ func_user }}"
  command: "{{ python_bin }}/python{{ airflow_py_version }} -m venv {{ airflow_venv_path }}"
  args:
    creates: "{{ airflow_venv_path }}/bin/activate"

- name: Configure AIRFLOW HOME 
  lineinfile: path=/home/{{ func_user }}/.bashrc insertafter=EOF
              line="export PATH={{ airflow_venv_path }}/bin:$PATH" 

- name: Install pip in the virtual environment  
  become_user: "{{ func_user }}"
  shell: "{{ airflow_venv_path }}/bin/pip install --upgrade pip"
  register: install_pip

- name: Install Apache Airflow and dependencies using pip module
  become_user: "{{ func_user }}"
  pip:
    name:
      - apache-airflow=={{ airflow_latest_version }}
      - apache-airflow[postgres]
      - apache-airflow[ldap]
      - apache-airflow[password]
    virtualenv: "{{ airflow_venv_path }}"
    virtualenv_python: python{{ airflow_py_version }}

- name: Set up Airflow database
  become_user: "{{ func_user }}"
  shell: | 
    source {{ airflow_venv_path }}/bin/activate
    export AIRFLOW_HOME={{ airflow_home }}
    {{ airflow_venv_path }}/bin/airflow db init
  register: setup_airflow_db

- name: Validate airflow DB Setup 
  debug: var=setup_airflow_db.stdout_lines

- name: Create DAG directory
  file: path={{ airflow_home }}/dags state=directory
        owner={{ func_user }} group={{ func_group }} mode="775"

- name: Validate airflow User 
  debug: var=airflow_user.stdout_lines

- name: Create Airflow Webserver systemd service file
  template: src=airflow-webserver.service.j2 dest=/etc/systemd/system/airflow-webserver.service
            owner={{ func_user }} group={{ func_group }} mode="0644"

- name: Create Airflow Scheduler systemd service file
  template: src=airflow-scheduler.service.j2 dest=/etc/systemd/system/airflow-scheduler.service
            owner={{ func_user }} group={{ func_group }} mode="0644"

- name: Reload systemd daemon
  shell: systemctl daemon-reload

- name: Enable and start Airflow Webserver service
  systemd: name=airflow-webserver enabled=true state=started
  register: webs_status

- name: Validate Airflow Webserver Status  
  debug: var=webs_status.status.ActiveState

- name: Enable and start Airflow Scheduler service
  systemd: name=airflow-scheduler enabled=true state=started
  register: scheduler_status

- name: Validate Airflow Scheduler Status  
  debug: var=scheduler_status.status.ActiveState


- name: Comment the existing sql_alchemy_conn line
  lineinfile: path={{ airflow_home }}/airflow.cfg regexp='^sql_alchemy_conn = sqlite:///{{ airflow_home }}/airflow.db'
              line='#sql_alchemy_conn = sqlite:///{{ airflow_home }}/airflow.db' state=present

- name: Ensure the new sql_alchemy_conn line exists
  lineinfile: path={{ airflow_home }}/airflow.cfg 
              line="sql_alchemy_conn = postgresql+psycopg2://{{ airflow_db_user }}:{{ airflow_db_passwd }}@{{ db_hostname }}/{{ airflow_db }}"
              insertafter="^#sql_alchemy_conn" state=present


- name: Comment the existing executor line
  lineinfile: path={{ airflow_home }}/airflow.cfg regexp="^executor = SequentialExecutor"
              line="#executor = SequentialExecutor" state=present

- name: Configure Local Executor
  lineinfile: path={{ airflow_home }}/airflow.cfg 
              line="executor = LocalExecutor"
              insertafter="^#executor = SequentialExecutor"
  notify: 
    - Restart Airflow Webserver Service
    - Restart Airflow Scheduler service
    - Validate Airflow Webserver Restart Status 
    - Validate Airflow Scheduler Restart Status

- name:  Initiate airflow db for backend db 
  become_user: "{{ func_user }}"
  shell: | 
    source {{ airflow_venv_path }}/bin/activate
    export AIRFLOW_HOME={{ airflow_home }}
    {{ airflow_venv_path }}/bin/airflow db init
  register: setup_backend_db

- name: Validate airflow DB Setup 
  debug: var=setup_backend_db.stdout_lines

- name: Create Airflow admin user 
  become_user: "{{ func_user }}"
  shell: |
    source {{ airflow_venv_path }}/bin/activate
    export AIRFLOW_HOME={{ airflow_home }}
    {{ airflow_venv_path }}/bin/airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com
  register: airflow_user
  


